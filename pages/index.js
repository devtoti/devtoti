import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.scss'
import Fab from '@mui/material/Fab';
import MailOutlineIcon from '@mui/icons-material/MailOutline';
import About from './components/About'
import Contact from './components/Contact'
import Projects from './components/Projects'
import Cover from './components/Cover'
import Navbar from './components/Navbar'
import Skills from './components/Skills'
import bgimg from '../public/images/basement.png'
import codingGif from '../public/images/coding.gif'
import { Parallax, ParallaxLayer } from '@react-spring/parallax'
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { useEffect, useState, useRef } from 'react';

// const theme = createTheme({
//   status: {
//     danger: '#e53e3e',
//   },
//   palette: {
//     primary: {
//       main: '#8AD88F',
//       darker: '#053e85',
//     },
//     neutral: {
//       main: '#64748B',
//       contrastText: '#fff',
//     },
//   },
// });


export default function Home() {
  const pathRef = useRef()
  const [currPathLength, setCurrPathLength] = useState(1000)
  const [currStrokeOffset, setCurrStrokeOffset] = useState(5015)
  const [winHeight, setWinHeight] = useState(0)

  useEffect(() => {
    const windowHeight = window.innerHeight;
    setWinHeight(windowHeight);
  }, [])

  // const pathLength = async () => {
  //   const currPathLength = await pathRef.current?.getTotalLength();
  //   setCurrPathLength(currPathLength)
  //   return currPathLength
  // }
  // pathLength();

  // window.addEventListener('scroll', () => {
  //   let scrollPercentage = (document.documentElement.scrollTop + document.body.scrollTop) / (document.documentElement.scrollHeight - document.documentElement.clientHeight);
  //   let drawLength = currPathLength * scrollPercentage;
  //   let strokeOffset = currPathLength - drawLength;
  //   const results = [scrollPercentage, strokeOffset, drawLength];
  //   console.log(strokeOffset)
  //   return results
  // })


  useEffect(() => {
    // console.log(pathRef.current.style)
    // console.log(pathRef.current.style.strokeDashoffset)

    console.log(currPathLength)
    let pathLength = pathRef.current.getTotalLength()
    setCurrPathLength(pathLength)

    const handleScroll = () => {
      let pathLength = pathRef.current.getTotalLength()
      setCurrPathLength(pathLength)
      console.log(currPathLength)
      // debugger;

      let scrollPercentage = (document.documentElement.scrollTop + document.body.scrollTop) / (document.documentElement.scrollHeight - document.documentElement.clientHeight);

      let drawLength = pathLength * scrollPercentage;

      let strokeOffset = pathLength - drawLength;

      setCurrStrokeOffset(strokeOffset)
      const results = [scrollPercentage, strokeOffset, drawLength];
      // console.log(scrollPercentage.toFixed(2))
      // console.log(currPathLength2)
      // return results
    }

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll)
  }, [])

  // window.addEventListener('scroll', handleScroll);

  // const handleScroll = () => {
  //   let scrollPercentage = (document.documentElement.scrollTop + document.body.scrollTop) / (document.documentElement.scrollHeight - document.documentElement.clientHeight);
  //   let drawLength = currPathLength * scrollPercentage;
  //   pathRef.style.strokeDashoffset = currPathLength - drawLength;
  // }

  // return () => window.removeEventListener('scroll', handleScroll)





  return (
    <>
      <svg viewBox="0 0 311 3685" fill="none" preserveAspectRatio='xMidYMax meet' className={styles.linePath}>
        <path d="M135.209 0V751.511L13 873.594H193.308L272.443 952.647V1358.92L13 1618.1V2399.63H272.443V3269.72H135.209L189.802 3324.26L135.209 3378.8L189.802 3433.33L135.209 3487.87H13V3680H306V3617.96" stroke="#F3C16B" strokeWidth="10" ref={pathRef}
          style={{
            strokeDasharray: `${currPathLength + ' ' + currPathLength}`,
            strokeDashoffset: currStrokeOffset,
          }}
        />
      </svg>

      <div className={styles.main} style={{ height: "auto" }}>
        <Head>
          <title>Devtoti Portfolio</title>
          <meta name="description" content="Generated by create next app" />
          <head>
            <link rel="icon" href="/favicon.ico" />
            <link rel="preconnect" href="https://fonts.googleapis.com" />
            <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="true" />
            <link href="https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz@8..144&display=swap" rel="stylesheet" />

          </head>
        </Head>
        <Navbar />

        <section>
          <Cover />
        </section>
        <section>
          <About />
        </section>
        <section>
          <Projects />
          <Skills />
        </section>
        <section>
          <Contact />
        </section>
      </div >
    </>
  )

}
