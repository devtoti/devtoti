import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.scss'
import Fab from '@mui/material/Fab';
import MailOutlineIcon from '@mui/icons-material/MailOutline';
import About from './components/About'
import Contact from './components/Contact'
import Projects from './components/Projects'
import Cover from './components/Cover'
import Navbar from './components/Navbar'
import Skills from './components/Skills'
import bgimg from '../public/images/basement.png'
import codingGif from '../public/images/coding.gif'
import { Parallax, ParallaxLayer } from '@react-spring/parallax'
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { useEffect, useState, useRef } from 'react';

// const theme = createTheme({
//   status: {
//     danger: '#e53e3e',
//   },
//   palette: {
//     primary: {
//       main: '#8AD88F',
//       darker: '#053e85',
//     },
//     neutral: {
//       main: '#64748B',
//       contrastText: '#fff',
//     },
//   },
// });


export default function Home() {
  const pathRef = useRef()
  const [currPathLength, setCurrPathLength] = useState(1000)
  const [currStrokeOffset, setCurrStrokeOffset] = useState(0)
  const [winHeight, setWinHeight] = useState(0)

  useEffect(() => {
    const windowHeight = window.innerHeight;
    setWinHeight(windowHeight);
  }, [])


  // //scroll animation *now disabled
  useEffect(() => {
    console.log(currPathLength)
    let pathLength = pathRef.current?.getTotalLength()
    setCurrPathLength(pathLength)

    const handleScroll = () => {
      let pathLength = pathRef.current.getTotalLength()
      setCurrPathLength(pathLength)
      console.log(currPathLength)
      // debugger;

      let scrollPercentage = (document.documentElement.scrollTop + document.body.scrollTop) / (document.documentElement.scrollHeight - document.documentElement.clientHeight);

      let drawLength = pathLength * scrollPercentage;

      let strokeOffset = pathLength - drawLength;

      setCurrStrokeOffset(strokeOffset)
      const results = [scrollPercentage, strokeOffset, drawLength];

    }

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll)
  }, [currPathLength])



  // <svg viewBox="0 0 311 3685" fill="none" preserveAspectRatio='xMidYMid meet' className={styles.linePath}>
  //   {/* <rect width="360" height="3700" fill="#1C1C31" /> */}
  //   <path d="M114 74H109V1669" stroke="url(#paint0_linear_45_18)" strokeWidth={winHeight > 1000 ? "20" : "10"} ref={pathRef}
  //     style={{
  //       strokeDasharray: `${currPathLength + ' ' + currPathLength}`,
  //       strokeDashoffset: currStrokeOffset,
  //     }} />
  //   <defs>
  //     <linearGradient id="paint0_linear_45_18" x1="111.5" y1="74" x2="111.5" y2="1669" gradientUnits="userSpaceOnUse">
  //       <stop offset="0.0001" stop-color="#D9D9D9" />
  //       <stop offset="0.59375" stop-color="#F2BE4B" />
  //       <stop offset="1" stop-color="#F2AC4B" />
  //     </linearGradient>
  //   </defs>
  // </svg>
  const SvgPath = () => {
    return (
      <svg viewBox="0 0 1509 5" fill="none" preserveAspectRatio='xMidYMin meet' className={styles.linePath}>
        <path d="M0 2.5H1509" stroke="url(#paint0_linear_67_21)" stroke-miterlimit="1.41421" strokeWidth={winHeight > 768 ? "10" : "20"} ref={pathRef}
          style={{
            strokeDasharray: `${currPathLength + ' ' + currPathLength}`,
            strokeDashoffset: currStrokeOffset,
          }} />
        <defs>
          <linearGradient id="paint0_linear_67_21" y1="754.5" x1="2.5" y2="754.5" x2="3.5" gradientUnits="userSpaceOnUse">
            <stop stop-color="#D9CCAF" />
            <stop stop-color="#F2C94C" />
          </linearGradient>
        </defs>
      </svg>


    )
  }


  return (
    <>

      <div className={styles.main} style={{ height: "auto" }}>
        <Head>
          <title>Devtoti Portfolio</title>
          <meta name="description" content="Generated by create next app" />

          <link rel="icon" href="/favicon.ico" />
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="true" />
          <link href="https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz@8..144&display=swap" rel="stylesheet" />


        </Head>
        <Navbar />
        <SvgPath />
        <section id="cover">

          <Cover />
        </section>
        <section id="about">
          <About />
        </section>
        <section id="projects">
          <Projects />
        </section>
        <section id="skills">
          <Skills />
        </section>
        <section id="contact">
          <Contact />
        </section>
      </div >
    </>
  )

}

